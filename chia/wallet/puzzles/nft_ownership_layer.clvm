(mod (
    NFT_OWNERSHIP_LAYER_MOD_HASH
    CURRENT_OWNER
    TRANSFER_PROGRAM
    INNER_PUZZLE
    inner_solution
   )

   (include condition_codes.clvm)
   (include curry-and-treehash.clinc)

   (defconstant NEW_OWNER_CONDITION -10)

   (defun sha256tree1
          (TREE)
          (if (l TREE)
              (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))
              (sha256 1 TREE)
          )
   )

   (defmacro assert items
       (if (r items)
           (list if (f items) (c assert (r items)) (q . (x)))
           (f items)
       )
   )

  (defun-inline nft_ownership_layer_puzzle_hash (NFT_OWNERSHIP_LAYER_MOD_HASH new_owner TRANSFER_PROGRAM inner_puzzle_hash)
      (puzzle-hash-of-curried-function NFT_OWNERSHIP_LAYER_MOD_HASH
                                       inner_puzzle_hash
                                       (sha256tree1 TRANSFER_PROGRAM)
                                       (sha256 ONE new_owner)
                                       (sha256 ONE NFT_OWNERSHIP_LAYER_MOD_HASH)
      )
   )

   (defun process_found_conditions (NFT_OWNERSHIP_LAYER_MOD_HASH odd_args tp_output)
     (c
       (c
         CREATE_COIN
         (c
           (nft_ownership_layer_puzzle_hash NFT_OWNERSHIP_LAYER_MOD_HASH (f tp_output) (f (r tp_output)) (f odd_args))
           (r odd_args)
          )
        )
        (f (r (r tp_output)))
     )
   )

   (defun wrap_odd_create_coins (NFT_OWNERSHIP_LAYER_MOD_HASH TRANSFER_PROGRAM CURRENT_OWNER all_conditions conditions odd_seen magic_seen odd_args tp_args)
     (if conditions
       (if (= (f (f conditions)) CREATE_COIN)
         (if (= (logand (f (r (r (f conditions))))) ONE)
            (assert (= odd_seen 0)
              ; then
              (wrap_odd_create_coins NFT_OWNERSHIP_LAYER_MOD_HASH TRANSFER_PROGRAM CURRENT_OWNER all_conditions (r conditions) 1 magic_seen (r (f conditions)) tp_args)
            )
            (c (f conditions) (wrap_odd_create_coins NFT_OWNERSHIP_LAYER_MOD_HASH TRANSFER_PROGRAM CURRENT_OWNER all_conditions (r conditions) odd_seen magic_seen odd_args tp_args))
         )
         (if (= (f (f conditions)) NEW_OWNER_CONDITION)
            (assert (= magic_seen 0)
              (wrap_odd_create_coins NFT_OWNERSHIP_LAYER_MOD_HASH TRANSFER_PROGRAM CURRENT_OWNER all_conditions (r conditions) odd_seen 1 odd_args (r (f conditions)))
            )
            (c (f conditions) (wrap_odd_create_coins NFT_OWNERSHIP_LAYER_MOD_HASH TRANSFER_PROGRAM CURRENT_OWNER all_conditions (r conditions) odd_seen magic_seen odd_args tp_args))
         )
       )
       (assert odd_seen magic_seen
         ; then
         (process_found_conditions NFT_OWNERSHIP_LAYER_MOD_HASH odd_args (a TRANSFER_PROGRAM (list CURRENT_OWNER all_conditions tp_args)))
       )
     )
   )

  (defun main (
      NFT_OWNERSHIP_LAYER_MOD_HASH
      TRANSFER_PROGRAM
      CURRENT_OWNER
      conditions
    )
    (wrap_odd_create_coins
      NFT_OWNERSHIP_LAYER_MOD_HASH
      TRANSFER_PROGRAM
      CURRENT_OWNER
      conditions
      conditions
      () () () () ()
    )
  )

  ; main
  (main
    NFT_OWNERSHIP_LAYER_MOD_HASH
    TRANSFER_PROGRAM
    CURRENT_OWNER
    (a INNER_PUZZLE inner_solution)
  )
)
